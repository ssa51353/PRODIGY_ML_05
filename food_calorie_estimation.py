# -*- coding: utf-8 -*-
"""Food Calorie Estimation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tczVLoxhcvX13s2LM6wvlry4jaPt_SPR
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
import matplotlib.pyplot as plt

# Load the dataset
df = pd.read_csv("/content/archive (5).zip")  # Replace with your dataset path

# Display the first few rows of the dataset
print(df.head())

# Extract relevant columns (assuming columns are 'Food', 'Serving', 'Calories')
df = df[['Food', 'Calories']]

# Remove 'cal' from the 'Calories' column and convert to numeric
df['Calories'] = df['Calories'].str.replace(' cal', '').astype(int)

# Display the first few rows of the cleaned dataset
print(df.head())

def plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):
    import numpy as np
    import math

    nunique = df.nunique()
    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]]
    nRow, nCol = df.shape
    columnNames = list(df)
    nGraphRow = math.ceil(nCol / nGraphPerRow)
    plt.figure(num=None, figsize=(6 * nGraphPerRow, 8 * nGraphRow), dpi=80, facecolor='w', edgecolor='k')
    for i in range(nCol):
        plt.subplot(nGraphRow, nGraphPerRow, i + 1)
        columnDf = df.iloc[:, i]
        if not np.issubdtype(type(columnDf.iloc[0]), np.number):
            valueCounts = columnDf.value_counts()
            valueCounts.plot.bar()
        else:
            columnDf.hist()
        plt.ylabel('counts')
        plt.xticks(rotation=90)
        plt.title(f'{columnNames[i]} (column {i})')
    plt.tight_layout()
    plt.show()

# Example usage
plotPerColumnDistribution(df, 10, 5)

# Encode the 'Food' column
label_encoder = LabelEncoder()
df['Food_encoded'] = label_encoder.fit_transform(df['Food'])

# Select features and target variable
X = df[['Food_encoded']]
y = df['Calories']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Absolute Error: {mae}')

# Function to estimate calories
def estimate_calories(food_name):
    food_encoded = label_encoder.transform([food_name])
    calories = model.predict([[food_encoded[0]]])[0]
    return calories

# Example usage
food_name = input("Enter food name: ")
estimated_calories = estimate_calories(food_name)
print(f"Estimated calories for {food_name}: {estimated_calories:.2f} cal")

